name: Backend CD

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/deploy_practice  # 본인 Docker Hub 리포명
  CONTAINER_NAME: spring-app
  PORT: "8080"
  APP_DIR: "/home/ubuntu/app"

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17 (Temurin) & Gradle cache
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"
          cache: gradle

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew clean build -x test

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker image (tag with sha & latest)
        run: |
          docker build -t "$IMAGE_NAME:${{ github.sha }}" -t "$IMAGE_NAME:latest" .

      - name: Push Docker image
        run: |
          docker push "$IMAGE_NAME:${{ github.sha }}"
          docker push "$IMAGE_NAME:latest"

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          port: 22
          script_stop: true
          script: |
            set -euo pipefail

            IMAGE="${{ env.IMAGE_NAME }}"
            TAG="${{ github.sha }}"
            NAME="${{ env.CONTAINER_NAME }}"
            PORT="${{ env.PORT }}"
            APP_DIR="${{ env.APP_DIR }}"

            # 1) application.yml 복원
            mkdir -p "$APP_DIR/config"
            cat > "$APP_DIR/config/application.yml" << 'YAML'${{ secrets.APPLICATION_YML }}YAML
            chmod 600 "$APP_DIR/config/application.yml"
            
            # 2) 새 이미지 pull
            docker pull "$IMAGE:$TAG"
            
            # 3) 기존 컨테이너 정리
            docker stop "$NAME" 2>/dev/null || true
            docker rm "$NAME" 2>/dev/null || true
            
            # 4) /config 마운트로 기동
            docker run -d \
              --name "$NAME" \
              --restart unless-stopped \
              -p "${PORT}:8080" \
              -v "$APP_DIR/config:/config" \
              "$IMAGE:$TAG"
          
            # 5) 안 쓰는 이미지 정리
            docker image prune -f
